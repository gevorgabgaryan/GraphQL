npm i @apollo/server graphql

resolvers/index.js

const resolvers = {
    Query: {
      hello: () => 'Hello world',
    },
  };

export default resolvers;



schemas/index.js


import { buildSchema } from "graphql";

const schemas = buildSchema(`
    type Query {
        hello: String
    }
`)

export default schemas;


API/index.js

import { ApolloServer } from '@apollo/server';
import { expressMiddleware } from '@apollo/server/express4';
import { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer'
import schemas from '../schemas';
import resolvers from '../resolvers';

// Set up Apollo Server
const server = new ApolloServer({
  typeDefs: schemas,
  resolvers,
  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],
});
await server.start();

app.use(
  expressMiddleware(server),
);

index.js

import API from "./API"

(async ()=>{
    try{
     await API.init();
    } catch(e) {
        console.log(e)
    }
})()

http://localhost:8000/graphql

query {
  hello
}














data/schema.js

const schema = buildSchema(`
    type Product {
        id: ID
        sku: String,
        name: String,
        price: Float,
        discountPercentage: Float,
    }
    type Query {
        product: Product
    }
`)



index.js

const root = { product: () => {
    return {
        id: 1,
        sku: 'Product1',
        name: 'Product1',
        price: 100,
        discountPercentage: 10,
    }
}};

app.use('/graphql', graphqlHTTP({
  schema: schema,
  rootValue: root,
  graphiql: true,
}));

http://localhost:8000/graphql

query {
  product {
    id
    name
    price
  }
}



data/resolvers.js


class Product {
    constructor(id, { name, sku, price, discount}) {
        this.id = id;
        this.name = name;
        this.sku = sku;
        this.price = price;
        this.discount = discount;
     }
}

const productDatabase = {};

const resolvers = {
    getProduct: ({ id }) => {
        return new Product(id, productDatabase[id]);
    },
    createProduct: ({ input }) => {
        let id = require('crypto').randomBytes(10).toString('hex');
        productDatabase[id] = input;
        return new Product(id, input);
    }
}

export default resolvers;


data/schema.js


import { buildSchema } from "graphql";

const schema = buildSchema(`
    type Product {
        id: ID
        sku: String,
        name: String,
        price: Float,
        discountPercentage: Float,
    }

    type Query {
        getProduct(id: ID): Product
    }

    input StoreInput {
        store: String
    }

    input ProductInput {
        id: ID
        sku: String,
        name: String,
        price: Float,
        discountPercentage: Float,
    }

    type Mutation {
        createProduct(input: ProductInput): Product
    }
`);

export default schema;



index.js


app.use('/graphql', graphqlHTTP({
    schema: schema,
    rootValue: resolvers,
    graphiql: true,
}));


http://localhost:8000/graphql

mutation {
  createProduct(input: {
        sku: "sku1",
        name: "product1",
        price: 100,
        discountPercentage: 20,
  }) {
    id,
    name
  }
}


query {
  getProduct (id: "18d1a8f574883de410b2") {
    id
    name
    price
  }
}
