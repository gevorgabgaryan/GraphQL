1. npm i @apollo/server graphql

resolvers/index.js

const resolvers = {
    Query: {
      hello: () => 'Hello world',
    },
  };

export default resolvers;



schemas/index.js


import { buildSchema } from "graphql";

const schemas = buildSchema(`
    type Query {
        hello: String
    }
`)

export default schemas;


API/index.js

import { ApolloServer } from '@apollo/server';
import { expressMiddleware } from '@apollo/server/express4';
import { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer'
import schemas from '../schemas';
import resolvers from '../resolvers';

// Set up Apollo Server
const server = new ApolloServer({
  typeDefs: schemas,
  resolvers,
  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],
});
await server.start();

app.use(
  expressMiddleware(server),
);

index.js

http://localhost:8000/graphql

query {
  hello
}














data/schema.js

const schema = buildSchema(`
    type Product {
        id: ID
        sku: String,
        name: String,
        price: Float,
        discountPercentage: Float,
    }
    type Query {
        product: Product
    }
`)



index.js

const root = { product: () => {
    return {
        id: 1,
        sku: 'Product1',
        name: 'Product1',
        price: 100,
        discountPercentage: 10,
    }
}};

app.use('/graphql', graphqlHTTP({
  schema: schema,
  rootValue: root,
  graphiql: true,
}));

http://localhost:8000/graphql

query {
  product {
    id
    name
    price
  }
}



data/resolvers.js


class Product {
    constructor(id, { name, sku, price, discount}) {
        this.id = id;
        this.name = name;
        this.sku = sku;
        this.price = price;
        this.discount = discount;
     }
}

const productDatabase = {};

const resolvers = {
    getProduct: ({ id }) => {
        return new Product(id, productDatabase[id]);
    },
    createProduct: ({ input }) => {
        let id = require('crypto').randomBytes(10).toString('hex');
        productDatabase[id] = input;
        return new Product(id, input);
    }
}

export default resolvers;


data/schema.js


import { buildSchema } from "graphql";

const schema = buildSchema(`
    type Product {
        id: ID
        sku: String,
        name: String,
        price: Float,
        discountPercentage: Float,
    }

    type Query {
        getProduct(id: ID): Product
    }

    input StoreInput {
        store: String
    }

    input ProductInput {
        id: ID
        sku: String,
        name: String,
        price: Float,
        discountPercentage: Float,
    }

    type Mutation {
        createProduct(input: ProductInput): Product
    }
`);

export default schema;



index.js


app.use('/graphql', graphqlHTTP({
    schema: schema,
    rootValue: resolvers,
    graphiql: true,
}));


http://localhost:8000/graphql

mutation {
  createProduct(input: {
        sku: "sku1",
        name: "product1",
        price: 100,
        discountPercentage: 20,
  }) {
    id,
    name
  }
}


query {
  getProduct (id: "18d1a8f574883de410b2") {
    id
    name
    price
  }
}


2. Get users
resolvers/index.js

import UserModel from "../models/UserModel";

const resolvers = {
    Query: {
      users: async () => {
         try{
            return await UserModel.find();
         } catch(e) {
            throw e;
         }
      },
    },
  };

export default resolvers;


schemas/index.js

import { buildSchema } from "graphql";

const schemas = buildSchema(`
    type User {
        id: String!
        firstName: String!
        lastName: String!
        role: String!
        status: String!
        email: String!
        password: String!
    }

    type Query {
        users: [User]
    }
`)

export default schemas;


query {
  users {
    id
    firstName
  }
}


http://localhost:8000/graphql

query {
  users {
    id
    firstName
  }
}

3. Register

resolvers

    Mutation : {
      regUser: async (arg1, args) => {
          try {
              const user = await UserModel.findOne({email: args.email});
              if (user) throw new Error('User already exists');
              const newUser = await UserModel.create({
                  firstName: args.firstName,
                  lastName: args.lastName,
                  email: args.email,
                  role: 'user',
                  status: "active",
                  password: args.password
              })

              newUser.id = newUser._id;
              return newUser;
          } catch (error) {
              throw error;
          }
      },
    }


schema

type Mutation {
        regUser(email: String!, password: String!, firstName: String, lastName: String): User!
    }



 Frontend Query

mutation RegisterUser($email: String!, $password: String!, $firstName: String, $lastName: String) {
  regUser(email: $email, password: $password, firstName: $firstName, lastName: $lastName) {
    id
    email
    firstName
    lastName
    role
    status
  }
}


{
  "email": "g@gmail.com",
  "password": "Ga123456"
}